window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "toncenter", "modulename": "toncenter", "type": "module", "doc": "<p></p>\n"}, {"fullname": "toncenter.client", "modulename": "toncenter.client", "type": "module", "doc": "<p></p>\n"}, {"fullname": "toncenter.client.GenericException", "modulename": "toncenter.client", "qualname": "GenericException", "type": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "toncenter.client.ValidationError", "modulename": "toncenter.client", "qualname": "ValidationError", "type": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "GenericException"}, {"fullname": "toncenter.client.LiteServerTimeout", "modulename": "toncenter.client", "qualname": "LiteServerTimeout", "type": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "GenericException"}, {"fullname": "toncenter.client.TransactionID", "modulename": "toncenter.client", "qualname": "TransactionID", "type": "class", "doc": "<p>TransactionID(lt: Union[int, str], hash: str)</p>\n"}, {"fullname": "toncenter.client.TransactionID.__init__", "modulename": "toncenter.client", "qualname": "TransactionID.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, lt: Union[int, str], hash: str)", "funcdef": "def"}, {"fullname": "toncenter.client.TransactionID.to_json", "modulename": "toncenter.client", "qualname": "TransactionID.to_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    *,\n    skipkeys: bool = False,\n    ensure_ascii: bool = True,\n    check_circular: bool = True,\n    allow_nan: bool = True,\n    indent: Union[int, str, NoneType] = None,\n    separators: Tuple[str, str] = None,\n    default: Callable = None,\n    sort_keys: bool = False,\n    **kw\n) -> str", "funcdef": "def"}, {"fullname": "toncenter.client.TransactionID.from_json", "modulename": "toncenter.client", "qualname": "TransactionID.from_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    s: Union[str, bytes, bytearray],\n    *,\n    parse_float=None,\n    parse_int=None,\n    parse_constant=None,\n    infer_missing=False,\n    **kw\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.TransactionID.to_dict", "modulename": "toncenter.client", "qualname": "TransactionID.to_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    encode_json=False\n) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]", "funcdef": "def"}, {"fullname": "toncenter.client.TransactionID.from_dict", "modulename": "toncenter.client", "qualname": "TransactionID.from_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    kvs: Union[dict, list, str, int, float, bool, NoneType],\n    *,\n    infer_missing=False\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.TransactionID.schema", "modulename": "toncenter.client", "qualname": "TransactionID.schema", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    *,\n    infer_missing: bool = False,\n    only=None,\n    exclude=(),\n    many: bool = False,\n    context=None,\n    load_only=(),\n    dump_only=(),\n    partial: bool = False,\n    unknown=None\n) -> dataclasses_json.mm.SchemaF[~A]", "funcdef": "def"}, {"fullname": "toncenter.client.BlockID", "modulename": "toncenter.client", "qualname": "BlockID", "type": "class", "doc": "<p>BlockID(workchain: int, shard: str, seqno: int, root_hash: Optional[str] = None, file_hash: Optional[str] = None)</p>\n"}, {"fullname": "toncenter.client.BlockID.__init__", "modulename": "toncenter.client", "qualname": "BlockID.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    workchain: int,\n    shard: str,\n    seqno: int,\n    root_hash: Optional[str] = None,\n    file_hash: Optional[str] = None\n)", "funcdef": "def"}, {"fullname": "toncenter.client.BlockID.root_hash", "modulename": "toncenter.client", "qualname": "BlockID.root_hash", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "toncenter.client.BlockID.file_hash", "modulename": "toncenter.client", "qualname": "BlockID.file_hash", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "toncenter.client.BlockID.to_json", "modulename": "toncenter.client", "qualname": "BlockID.to_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    *,\n    skipkeys: bool = False,\n    ensure_ascii: bool = True,\n    check_circular: bool = True,\n    allow_nan: bool = True,\n    indent: Union[int, str, NoneType] = None,\n    separators: Tuple[str, str] = None,\n    default: Callable = None,\n    sort_keys: bool = False,\n    **kw\n) -> str", "funcdef": "def"}, {"fullname": "toncenter.client.BlockID.from_json", "modulename": "toncenter.client", "qualname": "BlockID.from_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    s: Union[str, bytes, bytearray],\n    *,\n    parse_float=None,\n    parse_int=None,\n    parse_constant=None,\n    infer_missing=False,\n    **kw\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.BlockID.to_dict", "modulename": "toncenter.client", "qualname": "BlockID.to_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    encode_json=False\n) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]", "funcdef": "def"}, {"fullname": "toncenter.client.BlockID.from_dict", "modulename": "toncenter.client", "qualname": "BlockID.from_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    kvs: Union[dict, list, str, int, float, bool, NoneType],\n    *,\n    infer_missing=False\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.BlockID.schema", "modulename": "toncenter.client", "qualname": "BlockID.schema", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    *,\n    infer_missing: bool = False,\n    only=None,\n    exclude=(),\n    many: bool = False,\n    context=None,\n    load_only=(),\n    dump_only=(),\n    partial: bool = False,\n    unknown=None\n) -> dataclasses_json.mm.SchemaF[~A]", "funcdef": "def"}, {"fullname": "toncenter.client.Address", "modulename": "toncenter.client", "qualname": "Address", "type": "class", "doc": "<p>Address(account_address: str)</p>\n"}, {"fullname": "toncenter.client.Address.__init__", "modulename": "toncenter.client", "qualname": "Address.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, account_address: str)", "funcdef": "def"}, {"fullname": "toncenter.client.Address.to_json", "modulename": "toncenter.client", "qualname": "Address.to_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    *,\n    skipkeys: bool = False,\n    ensure_ascii: bool = True,\n    check_circular: bool = True,\n    allow_nan: bool = True,\n    indent: Union[int, str, NoneType] = None,\n    separators: Tuple[str, str] = None,\n    default: Callable = None,\n    sort_keys: bool = False,\n    **kw\n) -> str", "funcdef": "def"}, {"fullname": "toncenter.client.Address.from_json", "modulename": "toncenter.client", "qualname": "Address.from_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    s: Union[str, bytes, bytearray],\n    *,\n    parse_float=None,\n    parse_int=None,\n    parse_constant=None,\n    infer_missing=False,\n    **kw\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.Address.to_dict", "modulename": "toncenter.client", "qualname": "Address.to_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    encode_json=False\n) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]", "funcdef": "def"}, {"fullname": "toncenter.client.Address.from_dict", "modulename": "toncenter.client", "qualname": "Address.from_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    kvs: Union[dict, list, str, int, float, bool, NoneType],\n    *,\n    infer_missing=False\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.Address.schema", "modulename": "toncenter.client", "qualname": "Address.schema", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    *,\n    infer_missing: bool = False,\n    only=None,\n    exclude=(),\n    many: bool = False,\n    context=None,\n    load_only=(),\n    dump_only=(),\n    partial: bool = False,\n    unknown=None\n) -> dataclasses_json.mm.SchemaF[~A]", "funcdef": "def"}, {"fullname": "toncenter.client.FullAccountState", "modulename": "toncenter.client", "qualname": "FullAccountState", "type": "class", "doc": "<p>FullAccountState(balance: Union[int, str], last_transaction_id: toncenter.client.TransactionID, block_id: toncenter.client.BlockID, sync_utime: int, frozen_hash: Optional[str] = None, data: Optional[str] = None, code: Optional[str] = None, address: Optional[toncenter.client.Address] = None)</p>\n"}, {"fullname": "toncenter.client.FullAccountState.__init__", "modulename": "toncenter.client", "qualname": "FullAccountState.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    balance: Union[int, str],\n    last_transaction_id: toncenter.client.TransactionID,\n    block_id: toncenter.client.BlockID,\n    sync_utime: int,\n    frozen_hash: Optional[str] = None,\n    data: Optional[str] = None,\n    code: Optional[str] = None,\n    address: Optional[toncenter.client.Address] = None\n)", "funcdef": "def"}, {"fullname": "toncenter.client.FullAccountState.frozen_hash", "modulename": "toncenter.client", "qualname": "FullAccountState.frozen_hash", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "toncenter.client.FullAccountState.data", "modulename": "toncenter.client", "qualname": "FullAccountState.data", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "toncenter.client.FullAccountState.code", "modulename": "toncenter.client", "qualname": "FullAccountState.code", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "toncenter.client.FullAccountState.address", "modulename": "toncenter.client", "qualname": "FullAccountState.address", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[toncenter.client.Address]", "default_value": " = None"}, {"fullname": "toncenter.client.FullAccountState.to_json", "modulename": "toncenter.client", "qualname": "FullAccountState.to_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    *,\n    skipkeys: bool = False,\n    ensure_ascii: bool = True,\n    check_circular: bool = True,\n    allow_nan: bool = True,\n    indent: Union[int, str, NoneType] = None,\n    separators: Tuple[str, str] = None,\n    default: Callable = None,\n    sort_keys: bool = False,\n    **kw\n) -> str", "funcdef": "def"}, {"fullname": "toncenter.client.FullAccountState.from_json", "modulename": "toncenter.client", "qualname": "FullAccountState.from_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    s: Union[str, bytes, bytearray],\n    *,\n    parse_float=None,\n    parse_int=None,\n    parse_constant=None,\n    infer_missing=False,\n    **kw\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.FullAccountState.to_dict", "modulename": "toncenter.client", "qualname": "FullAccountState.to_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    encode_json=False\n) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]", "funcdef": "def"}, {"fullname": "toncenter.client.FullAccountState.from_dict", "modulename": "toncenter.client", "qualname": "FullAccountState.from_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    kvs: Union[dict, list, str, int, float, bool, NoneType],\n    *,\n    infer_missing=False\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.FullAccountState.schema", "modulename": "toncenter.client", "qualname": "FullAccountState.schema", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    *,\n    infer_missing: bool = False,\n    only=None,\n    exclude=(),\n    many: bool = False,\n    context=None,\n    load_only=(),\n    dump_only=(),\n    partial: bool = False,\n    unknown=None\n) -> dataclasses_json.mm.SchemaF[~A]", "funcdef": "def"}, {"fullname": "toncenter.client.WalletState", "modulename": "toncenter.client", "qualname": "WalletState", "type": "class", "doc": "<p>WalletState(wallet: bool, balance: Union[int, str], account_state: str, last_transaction_id: toncenter.client.TransactionID)</p>\n"}, {"fullname": "toncenter.client.WalletState.__init__", "modulename": "toncenter.client", "qualname": "WalletState.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    wallet: bool,\n    balance: Union[int, str],\n    account_state: str,\n    last_transaction_id: toncenter.client.TransactionID\n)", "funcdef": "def"}, {"fullname": "toncenter.client.WalletState.to_json", "modulename": "toncenter.client", "qualname": "WalletState.to_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    *,\n    skipkeys: bool = False,\n    ensure_ascii: bool = True,\n    check_circular: bool = True,\n    allow_nan: bool = True,\n    indent: Union[int, str, NoneType] = None,\n    separators: Tuple[str, str] = None,\n    default: Callable = None,\n    sort_keys: bool = False,\n    **kw\n) -> str", "funcdef": "def"}, {"fullname": "toncenter.client.WalletState.from_json", "modulename": "toncenter.client", "qualname": "WalletState.from_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    s: Union[str, bytes, bytearray],\n    *,\n    parse_float=None,\n    parse_int=None,\n    parse_constant=None,\n    infer_missing=False,\n    **kw\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.WalletState.to_dict", "modulename": "toncenter.client", "qualname": "WalletState.to_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    encode_json=False\n) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]", "funcdef": "def"}, {"fullname": "toncenter.client.WalletState.from_dict", "modulename": "toncenter.client", "qualname": "WalletState.from_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    kvs: Union[dict, list, str, int, float, bool, NoneType],\n    *,\n    infer_missing=False\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.WalletState.schema", "modulename": "toncenter.client", "qualname": "WalletState.schema", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    *,\n    infer_missing: bool = False,\n    only=None,\n    exclude=(),\n    many: bool = False,\n    context=None,\n    load_only=(),\n    dump_only=(),\n    partial: bool = False,\n    unknown=None\n) -> dataclasses_json.mm.SchemaF[~A]", "funcdef": "def"}, {"fullname": "toncenter.client.MessageData", "modulename": "toncenter.client", "qualname": "MessageData", "type": "class", "doc": "<p>MessageData(body: str, init_state: str)</p>\n"}, {"fullname": "toncenter.client.MessageData.__init__", "modulename": "toncenter.client", "qualname": "MessageData.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, body: str, init_state: str)", "funcdef": "def"}, {"fullname": "toncenter.client.MessageData.to_json", "modulename": "toncenter.client", "qualname": "MessageData.to_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    *,\n    skipkeys: bool = False,\n    ensure_ascii: bool = True,\n    check_circular: bool = True,\n    allow_nan: bool = True,\n    indent: Union[int, str, NoneType] = None,\n    separators: Tuple[str, str] = None,\n    default: Callable = None,\n    sort_keys: bool = False,\n    **kw\n) -> str", "funcdef": "def"}, {"fullname": "toncenter.client.MessageData.from_json", "modulename": "toncenter.client", "qualname": "MessageData.from_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    s: Union[str, bytes, bytearray],\n    *,\n    parse_float=None,\n    parse_int=None,\n    parse_constant=None,\n    infer_missing=False,\n    **kw\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.MessageData.to_dict", "modulename": "toncenter.client", "qualname": "MessageData.to_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    encode_json=False\n) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]", "funcdef": "def"}, {"fullname": "toncenter.client.MessageData.from_dict", "modulename": "toncenter.client", "qualname": "MessageData.from_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    kvs: Union[dict, list, str, int, float, bool, NoneType],\n    *,\n    infer_missing=False\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.MessageData.schema", "modulename": "toncenter.client", "qualname": "MessageData.schema", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    *,\n    infer_missing: bool = False,\n    only=None,\n    exclude=(),\n    many: bool = False,\n    context=None,\n    load_only=(),\n    dump_only=(),\n    partial: bool = False,\n    unknown=None\n) -> dataclasses_json.mm.SchemaF[~A]", "funcdef": "def"}, {"fullname": "toncenter.client.Message", "modulename": "toncenter.client", "qualname": "Message", "type": "class", "doc": "<p>Message(destination: str, value: Union[str, int], fwd_fee: str, ihr_fee: str, created_lt: Union[int, str], body_hash: str, msg_data: toncenter.client.MessageData, message: str, source: Optional[str] = None)</p>\n"}, {"fullname": "toncenter.client.Message.__init__", "modulename": "toncenter.client", "qualname": "Message.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    destination: str,\n    value: Union[str, int],\n    fwd_fee: str,\n    ihr_fee: str,\n    created_lt: Union[int, str],\n    body_hash: str,\n    msg_data: toncenter.client.MessageData,\n    message: str,\n    source: Optional[str] = None\n)", "funcdef": "def"}, {"fullname": "toncenter.client.Message.source", "modulename": "toncenter.client", "qualname": "Message.source", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]", "default_value": " = None"}, {"fullname": "toncenter.client.Message.to_json", "modulename": "toncenter.client", "qualname": "Message.to_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    *,\n    skipkeys: bool = False,\n    ensure_ascii: bool = True,\n    check_circular: bool = True,\n    allow_nan: bool = True,\n    indent: Union[int, str, NoneType] = None,\n    separators: Tuple[str, str] = None,\n    default: Callable = None,\n    sort_keys: bool = False,\n    **kw\n) -> str", "funcdef": "def"}, {"fullname": "toncenter.client.Message.from_json", "modulename": "toncenter.client", "qualname": "Message.from_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    s: Union[str, bytes, bytearray],\n    *,\n    parse_float=None,\n    parse_int=None,\n    parse_constant=None,\n    infer_missing=False,\n    **kw\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.Message.to_dict", "modulename": "toncenter.client", "qualname": "Message.to_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    encode_json=False\n) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]", "funcdef": "def"}, {"fullname": "toncenter.client.Message.from_dict", "modulename": "toncenter.client", "qualname": "Message.from_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    kvs: Union[dict, list, str, int, float, bool, NoneType],\n    *,\n    infer_missing=False\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.Message.schema", "modulename": "toncenter.client", "qualname": "Message.schema", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    *,\n    infer_missing: bool = False,\n    only=None,\n    exclude=(),\n    many: bool = False,\n    context=None,\n    load_only=(),\n    dump_only=(),\n    partial: bool = False,\n    unknown=None\n) -> dataclasses_json.mm.SchemaF[~A]", "funcdef": "def"}, {"fullname": "toncenter.client.Transaction", "modulename": "toncenter.client", "qualname": "Transaction", "type": "class", "doc": "<p>Transaction(utime: int, data: str, transaction_id: toncenter.client.TransactionID, fee: str, storage_fee: str, other_fee: str, out_msgs: List[toncenter.client.Message], in_msg: Optional[toncenter.client.Message] = None)</p>\n"}, {"fullname": "toncenter.client.Transaction.__init__", "modulename": "toncenter.client", "qualname": "Transaction.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    utime: int,\n    data: str,\n    transaction_id: toncenter.client.TransactionID,\n    fee: str,\n    storage_fee: str,\n    other_fee: str,\n    out_msgs: List[toncenter.client.Message],\n    in_msg: Optional[toncenter.client.Message] = None\n)", "funcdef": "def"}, {"fullname": "toncenter.client.Transaction.in_msg", "modulename": "toncenter.client", "qualname": "Transaction.in_msg", "type": "variable", "doc": "<p></p>\n", "annotation": ": Optional[toncenter.client.Message]", "default_value": " = None"}, {"fullname": "toncenter.client.Transaction.to_json", "modulename": "toncenter.client", "qualname": "Transaction.to_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    *,\n    skipkeys: bool = False,\n    ensure_ascii: bool = True,\n    check_circular: bool = True,\n    allow_nan: bool = True,\n    indent: Union[int, str, NoneType] = None,\n    separators: Tuple[str, str] = None,\n    default: Callable = None,\n    sort_keys: bool = False,\n    **kw\n) -> str", "funcdef": "def"}, {"fullname": "toncenter.client.Transaction.from_json", "modulename": "toncenter.client", "qualname": "Transaction.from_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    s: Union[str, bytes, bytearray],\n    *,\n    parse_float=None,\n    parse_int=None,\n    parse_constant=None,\n    infer_missing=False,\n    **kw\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.Transaction.to_dict", "modulename": "toncenter.client", "qualname": "Transaction.to_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    encode_json=False\n) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]", "funcdef": "def"}, {"fullname": "toncenter.client.Transaction.from_dict", "modulename": "toncenter.client", "qualname": "Transaction.from_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    kvs: Union[dict, list, str, int, float, bool, NoneType],\n    *,\n    infer_missing=False\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.Transaction.schema", "modulename": "toncenter.client", "qualname": "Transaction.schema", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    *,\n    infer_missing: bool = False,\n    only=None,\n    exclude=(),\n    many: bool = False,\n    context=None,\n    load_only=(),\n    dump_only=(),\n    partial: bool = False,\n    unknown=None\n) -> dataclasses_json.mm.SchemaF[~A]", "funcdef": "def"}, {"fullname": "toncenter.client.Base64Address", "modulename": "toncenter.client", "qualname": "Base64Address", "type": "class", "doc": "<p>Base64Address(b64: str, b64url: str)</p>\n"}, {"fullname": "toncenter.client.Base64Address.__init__", "modulename": "toncenter.client", "qualname": "Base64Address.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, b64: str, b64url: str)", "funcdef": "def"}, {"fullname": "toncenter.client.Base64Address.to_json", "modulename": "toncenter.client", "qualname": "Base64Address.to_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    *,\n    skipkeys: bool = False,\n    ensure_ascii: bool = True,\n    check_circular: bool = True,\n    allow_nan: bool = True,\n    indent: Union[int, str, NoneType] = None,\n    separators: Tuple[str, str] = None,\n    default: Callable = None,\n    sort_keys: bool = False,\n    **kw\n) -> str", "funcdef": "def"}, {"fullname": "toncenter.client.Base64Address.from_json", "modulename": "toncenter.client", "qualname": "Base64Address.from_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    s: Union[str, bytes, bytearray],\n    *,\n    parse_float=None,\n    parse_int=None,\n    parse_constant=None,\n    infer_missing=False,\n    **kw\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.Base64Address.to_dict", "modulename": "toncenter.client", "qualname": "Base64Address.to_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    encode_json=False\n) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]", "funcdef": "def"}, {"fullname": "toncenter.client.Base64Address.from_dict", "modulename": "toncenter.client", "qualname": "Base64Address.from_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    kvs: Union[dict, list, str, int, float, bool, NoneType],\n    *,\n    infer_missing=False\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.Base64Address.schema", "modulename": "toncenter.client", "qualname": "Base64Address.schema", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    *,\n    infer_missing: bool = False,\n    only=None,\n    exclude=(),\n    many: bool = False,\n    context=None,\n    load_only=(),\n    dump_only=(),\n    partial: bool = False,\n    unknown=None\n) -> dataclasses_json.mm.SchemaF[~A]", "funcdef": "def"}, {"fullname": "toncenter.client.AddressMetadata", "modulename": "toncenter.client", "qualname": "AddressMetadata", "type": "class", "doc": "<p>AddressMetadata(raw_form: str, bounceable: toncenter.client.Base64Address, non_bounceable: toncenter.client.Base64Address, given_type: str, test_only: bool)</p>\n"}, {"fullname": "toncenter.client.AddressMetadata.__init__", "modulename": "toncenter.client", "qualname": "AddressMetadata.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    raw_form: str,\n    bounceable: toncenter.client.Base64Address,\n    non_bounceable: toncenter.client.Base64Address,\n    given_type: str,\n    test_only: bool\n)", "funcdef": "def"}, {"fullname": "toncenter.client.AddressMetadata.to_json", "modulename": "toncenter.client", "qualname": "AddressMetadata.to_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    *,\n    skipkeys: bool = False,\n    ensure_ascii: bool = True,\n    check_circular: bool = True,\n    allow_nan: bool = True,\n    indent: Union[int, str, NoneType] = None,\n    separators: Tuple[str, str] = None,\n    default: Callable = None,\n    sort_keys: bool = False,\n    **kw\n) -> str", "funcdef": "def"}, {"fullname": "toncenter.client.AddressMetadata.from_json", "modulename": "toncenter.client", "qualname": "AddressMetadata.from_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    s: Union[str, bytes, bytearray],\n    *,\n    parse_float=None,\n    parse_int=None,\n    parse_constant=None,\n    infer_missing=False,\n    **kw\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.AddressMetadata.to_dict", "modulename": "toncenter.client", "qualname": "AddressMetadata.to_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    encode_json=False\n) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]", "funcdef": "def"}, {"fullname": "toncenter.client.AddressMetadata.from_dict", "modulename": "toncenter.client", "qualname": "AddressMetadata.from_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    kvs: Union[dict, list, str, int, float, bool, NoneType],\n    *,\n    infer_missing=False\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.AddressMetadata.schema", "modulename": "toncenter.client", "qualname": "AddressMetadata.schema", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    *,\n    infer_missing: bool = False,\n    only=None,\n    exclude=(),\n    many: bool = False,\n    context=None,\n    load_only=(),\n    dump_only=(),\n    partial: bool = False,\n    unknown=None\n) -> dataclasses_json.mm.SchemaF[~A]", "funcdef": "def"}, {"fullname": "toncenter.client.MasterchainState", "modulename": "toncenter.client", "qualname": "MasterchainState", "type": "class", "doc": "<p>MasterchainState(last: toncenter.client.BlockID, state_root_hash: str, init: toncenter.client.BlockID)</p>\n"}, {"fullname": "toncenter.client.MasterchainState.__init__", "modulename": "toncenter.client", "qualname": "MasterchainState.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    last: toncenter.client.BlockID,\n    state_root_hash: str,\n    init: toncenter.client.BlockID\n)", "funcdef": "def"}, {"fullname": "toncenter.client.MasterchainState.to_json", "modulename": "toncenter.client", "qualname": "MasterchainState.to_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    *,\n    skipkeys: bool = False,\n    ensure_ascii: bool = True,\n    check_circular: bool = True,\n    allow_nan: bool = True,\n    indent: Union[int, str, NoneType] = None,\n    separators: Tuple[str, str] = None,\n    default: Callable = None,\n    sort_keys: bool = False,\n    **kw\n) -> str", "funcdef": "def"}, {"fullname": "toncenter.client.MasterchainState.from_json", "modulename": "toncenter.client", "qualname": "MasterchainState.from_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    s: Union[str, bytes, bytearray],\n    *,\n    parse_float=None,\n    parse_int=None,\n    parse_constant=None,\n    infer_missing=False,\n    **kw\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.MasterchainState.to_dict", "modulename": "toncenter.client", "qualname": "MasterchainState.to_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    encode_json=False\n) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]", "funcdef": "def"}, {"fullname": "toncenter.client.MasterchainState.from_dict", "modulename": "toncenter.client", "qualname": "MasterchainState.from_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    kvs: Union[dict, list, str, int, float, bool, NoneType],\n    *,\n    infer_missing=False\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.MasterchainState.schema", "modulename": "toncenter.client", "qualname": "MasterchainState.schema", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    *,\n    infer_missing: bool = False,\n    only=None,\n    exclude=(),\n    many: bool = False,\n    context=None,\n    load_only=(),\n    dump_only=(),\n    partial: bool = False,\n    unknown=None\n) -> dataclasses_json.mm.SchemaF[~A]", "funcdef": "def"}, {"fullname": "toncenter.client.ConsensusBlock", "modulename": "toncenter.client", "qualname": "ConsensusBlock", "type": "class", "doc": "<p>ConsensusBlock(consensus_block: int, timestamp: float)</p>\n"}, {"fullname": "toncenter.client.ConsensusBlock.__init__", "modulename": "toncenter.client", "qualname": "ConsensusBlock.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, consensus_block: int, timestamp: float)", "funcdef": "def"}, {"fullname": "toncenter.client.ConsensusBlock.to_json", "modulename": "toncenter.client", "qualname": "ConsensusBlock.to_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    *,\n    skipkeys: bool = False,\n    ensure_ascii: bool = True,\n    check_circular: bool = True,\n    allow_nan: bool = True,\n    indent: Union[int, str, NoneType] = None,\n    separators: Tuple[str, str] = None,\n    default: Callable = None,\n    sort_keys: bool = False,\n    **kw\n) -> str", "funcdef": "def"}, {"fullname": "toncenter.client.ConsensusBlock.from_json", "modulename": "toncenter.client", "qualname": "ConsensusBlock.from_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    s: Union[str, bytes, bytearray],\n    *,\n    parse_float=None,\n    parse_int=None,\n    parse_constant=None,\n    infer_missing=False,\n    **kw\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.ConsensusBlock.to_dict", "modulename": "toncenter.client", "qualname": "ConsensusBlock.to_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    encode_json=False\n) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]", "funcdef": "def"}, {"fullname": "toncenter.client.ConsensusBlock.from_dict", "modulename": "toncenter.client", "qualname": "ConsensusBlock.from_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    kvs: Union[dict, list, str, int, float, bool, NoneType],\n    *,\n    infer_missing=False\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.ConsensusBlock.schema", "modulename": "toncenter.client", "qualname": "ConsensusBlock.schema", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    *,\n    infer_missing: bool = False,\n    only=None,\n    exclude=(),\n    many: bool = False,\n    context=None,\n    load_only=(),\n    dump_only=(),\n    partial: bool = False,\n    unknown=None\n) -> dataclasses_json.mm.SchemaF[~A]", "funcdef": "def"}, {"fullname": "toncenter.client.Shards", "modulename": "toncenter.client", "qualname": "Shards", "type": "class", "doc": "<p>Shards(shards: List[toncenter.client.BlockID])</p>\n"}, {"fullname": "toncenter.client.Shards.__init__", "modulename": "toncenter.client", "qualname": "Shards.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, shards: List[toncenter.client.BlockID])", "funcdef": "def"}, {"fullname": "toncenter.client.Shards.to_json", "modulename": "toncenter.client", "qualname": "Shards.to_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    *,\n    skipkeys: bool = False,\n    ensure_ascii: bool = True,\n    check_circular: bool = True,\n    allow_nan: bool = True,\n    indent: Union[int, str, NoneType] = None,\n    separators: Tuple[str, str] = None,\n    default: Callable = None,\n    sort_keys: bool = False,\n    **kw\n) -> str", "funcdef": "def"}, {"fullname": "toncenter.client.Shards.from_json", "modulename": "toncenter.client", "qualname": "Shards.from_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    s: Union[str, bytes, bytearray],\n    *,\n    parse_float=None,\n    parse_int=None,\n    parse_constant=None,\n    infer_missing=False,\n    **kw\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.Shards.to_dict", "modulename": "toncenter.client", "qualname": "Shards.to_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    encode_json=False\n) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]", "funcdef": "def"}, {"fullname": "toncenter.client.Shards.from_dict", "modulename": "toncenter.client", "qualname": "Shards.from_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    kvs: Union[dict, list, str, int, float, bool, NoneType],\n    *,\n    infer_missing=False\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.Shards.schema", "modulename": "toncenter.client", "qualname": "Shards.schema", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    *,\n    infer_missing: bool = False,\n    only=None,\n    exclude=(),\n    many: bool = False,\n    context=None,\n    load_only=(),\n    dump_only=(),\n    partial: bool = False,\n    unknown=None\n) -> dataclasses_json.mm.SchemaF[~A]", "funcdef": "def"}, {"fullname": "toncenter.client.ShortTransaction", "modulename": "toncenter.client", "qualname": "ShortTransaction", "type": "class", "doc": "<p>ShortTransaction(mode: int, account: str, lt: Union[int, str], hash: str)</p>\n"}, {"fullname": "toncenter.client.ShortTransaction.__init__", "modulename": "toncenter.client", "qualname": "ShortTransaction.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, mode: int, account: str, lt: Union[int, str], hash: str)", "funcdef": "def"}, {"fullname": "toncenter.client.ShortTransaction.to_json", "modulename": "toncenter.client", "qualname": "ShortTransaction.to_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    *,\n    skipkeys: bool = False,\n    ensure_ascii: bool = True,\n    check_circular: bool = True,\n    allow_nan: bool = True,\n    indent: Union[int, str, NoneType] = None,\n    separators: Tuple[str, str] = None,\n    default: Callable = None,\n    sort_keys: bool = False,\n    **kw\n) -> str", "funcdef": "def"}, {"fullname": "toncenter.client.ShortTransaction.from_json", "modulename": "toncenter.client", "qualname": "ShortTransaction.from_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    s: Union[str, bytes, bytearray],\n    *,\n    parse_float=None,\n    parse_int=None,\n    parse_constant=None,\n    infer_missing=False,\n    **kw\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.ShortTransaction.to_dict", "modulename": "toncenter.client", "qualname": "ShortTransaction.to_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    encode_json=False\n) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]", "funcdef": "def"}, {"fullname": "toncenter.client.ShortTransaction.from_dict", "modulename": "toncenter.client", "qualname": "ShortTransaction.from_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    kvs: Union[dict, list, str, int, float, bool, NoneType],\n    *,\n    infer_missing=False\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.ShortTransaction.schema", "modulename": "toncenter.client", "qualname": "ShortTransaction.schema", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    *,\n    infer_missing: bool = False,\n    only=None,\n    exclude=(),\n    many: bool = False,\n    context=None,\n    load_only=(),\n    dump_only=(),\n    partial: bool = False,\n    unknown=None\n) -> dataclasses_json.mm.SchemaF[~A]", "funcdef": "def"}, {"fullname": "toncenter.client.BlockTransactions", "modulename": "toncenter.client", "qualname": "BlockTransactions", "type": "class", "doc": "<p>BlockTransactions(id: toncenter.client.BlockID, req_count: int, incomplete: bool, transactions: List[toncenter.client.ShortTransaction])</p>\n"}, {"fullname": "toncenter.client.BlockTransactions.__init__", "modulename": "toncenter.client", "qualname": "BlockTransactions.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    id: toncenter.client.BlockID,\n    req_count: int,\n    incomplete: bool,\n    transactions: List[toncenter.client.ShortTransaction]\n)", "funcdef": "def"}, {"fullname": "toncenter.client.BlockTransactions.to_json", "modulename": "toncenter.client", "qualname": "BlockTransactions.to_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    *,\n    skipkeys: bool = False,\n    ensure_ascii: bool = True,\n    check_circular: bool = True,\n    allow_nan: bool = True,\n    indent: Union[int, str, NoneType] = None,\n    separators: Tuple[str, str] = None,\n    default: Callable = None,\n    sort_keys: bool = False,\n    **kw\n) -> str", "funcdef": "def"}, {"fullname": "toncenter.client.BlockTransactions.from_json", "modulename": "toncenter.client", "qualname": "BlockTransactions.from_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    s: Union[str, bytes, bytearray],\n    *,\n    parse_float=None,\n    parse_int=None,\n    parse_constant=None,\n    infer_missing=False,\n    **kw\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.BlockTransactions.to_dict", "modulename": "toncenter.client", "qualname": "BlockTransactions.to_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    encode_json=False\n) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]", "funcdef": "def"}, {"fullname": "toncenter.client.BlockTransactions.from_dict", "modulename": "toncenter.client", "qualname": "BlockTransactions.from_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    kvs: Union[dict, list, str, int, float, bool, NoneType],\n    *,\n    infer_missing=False\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.BlockTransactions.schema", "modulename": "toncenter.client", "qualname": "BlockTransactions.schema", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    *,\n    infer_missing: bool = False,\n    only=None,\n    exclude=(),\n    many: bool = False,\n    context=None,\n    load_only=(),\n    dump_only=(),\n    partial: bool = False,\n    unknown=None\n) -> dataclasses_json.mm.SchemaF[~A]", "funcdef": "def"}, {"fullname": "toncenter.client.BlockHeader", "modulename": "toncenter.client", "qualname": "BlockHeader", "type": "class", "doc": "<p>BlockHeader(id: toncenter.client.BlockID, global_id: int, version: int, after_merge: bool, after_split: bool, before_split: bool, want_merge: bool, want_split: bool, validator_list_hash_short: int, catchain_seqno: int, min_ref_mc_seqno: int, is_key_block: bool, prev_key_block_seqno: int, start_lt: Union[int, str], end_lt: Union[int, str], prev_blocks: List[toncenter.client.BlockID])</p>\n"}, {"fullname": "toncenter.client.BlockHeader.__init__", "modulename": "toncenter.client", "qualname": "BlockHeader.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    id: toncenter.client.BlockID,\n    global_id: int,\n    version: int,\n    after_merge: bool,\n    after_split: bool,\n    before_split: bool,\n    want_merge: bool,\n    want_split: bool,\n    validator_list_hash_short: int,\n    catchain_seqno: int,\n    min_ref_mc_seqno: int,\n    is_key_block: bool,\n    prev_key_block_seqno: int,\n    start_lt: Union[int, str],\n    end_lt: Union[int, str],\n    prev_blocks: List[toncenter.client.BlockID]\n)", "funcdef": "def"}, {"fullname": "toncenter.client.BlockHeader.to_json", "modulename": "toncenter.client", "qualname": "BlockHeader.to_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    *,\n    skipkeys: bool = False,\n    ensure_ascii: bool = True,\n    check_circular: bool = True,\n    allow_nan: bool = True,\n    indent: Union[int, str, NoneType] = None,\n    separators: Tuple[str, str] = None,\n    default: Callable = None,\n    sort_keys: bool = False,\n    **kw\n) -> str", "funcdef": "def"}, {"fullname": "toncenter.client.BlockHeader.from_json", "modulename": "toncenter.client", "qualname": "BlockHeader.from_json", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    s: Union[str, bytes, bytearray],\n    *,\n    parse_float=None,\n    parse_int=None,\n    parse_constant=None,\n    infer_missing=False,\n    **kw\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.BlockHeader.to_dict", "modulename": "toncenter.client", "qualname": "BlockHeader.to_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    encode_json=False\n) -> Dict[str, Union[dict, list, str, int, float, bool, NoneType]]", "funcdef": "def"}, {"fullname": "toncenter.client.BlockHeader.from_dict", "modulename": "toncenter.client", "qualname": "BlockHeader.from_dict", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    kvs: Union[dict, list, str, int, float, bool, NoneType],\n    *,\n    infer_missing=False\n) -> ~A", "funcdef": "def"}, {"fullname": "toncenter.client.BlockHeader.schema", "modulename": "toncenter.client", "qualname": "BlockHeader.schema", "type": "function", "doc": "<p></p>\n", "signature": "(\n    cls: Type[~A],\n    *,\n    infer_missing: bool = False,\n    only=None,\n    exclude=(),\n    many: bool = False,\n    context=None,\n    load_only=(),\n    dump_only=(),\n    partial: bool = False,\n    unknown=None\n) -> dataclasses_json.mm.SchemaF[~A]", "funcdef": "def"}, {"fullname": "toncenter.client.Client", "modulename": "toncenter.client", "qualname": "Client", "type": "class", "doc": "<p></p>\n"}, {"fullname": "toncenter.client.Client.__init__", "modulename": "toncenter.client", "qualname": "Client.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    token: str = None,\n    base_url: str = 'https://toncenter.com/api/v2/',\n    avoid_ratelimit: bool = True\n)", "funcdef": "def"}, {"fullname": "toncenter.client.Client.check_ratelimit", "modulename": "toncenter.client", "qualname": "Client.check_ratelimit", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> bool", "funcdef": "def"}, {"fullname": "toncenter.client.Client.reset_ratelimit", "modulename": "toncenter.client", "qualname": "Client.reset_ratelimit", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> None", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.start", "modulename": "toncenter.client", "qualname": "Client.start", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> None", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.close", "modulename": "toncenter.client", "qualname": "Client.close", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> None", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.get", "modulename": "toncenter.client", "qualname": "Client.get", "type": "function", "doc": "<p></p>\n", "signature": "(self, url: str, params: dict) -> dict", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.post", "modulename": "toncenter.client", "qualname": "Client.post", "type": "function", "doc": "<p></p>\n", "signature": "(self, url: str, data: dict) -> dict", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.get_address_info", "modulename": "toncenter.client", "qualname": "Client.get_address_info", "type": "function", "doc": "<p>Get basic information about the address: balance, code, data, last_transaction_id.</p>\n", "signature": "(self, address: str) -> toncenter.client.FullAccountState", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.get_extended_address_info", "modulename": "toncenter.client", "qualname": "Client.get_extended_address_info", "type": "function", "doc": "<p>Similar to previous one but tries to parse additional information for known contract types.\nThis method is based on tonlib's function getAccountState.\nFor detecting wallets we recommend to use getWalletInformation.</p>\n", "signature": "(self, address: str) -> toncenter.client.FullAccountState", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.get_wallet_information", "modulename": "toncenter.client", "qualname": "Client.get_wallet_information", "type": "function", "doc": "<p>Retrieve wallet information.\nThis method parses contract state and currently supports more wallet types than getExtendedAddressInformation: simple wallet, standart wallet, v3 wallet, v4 wallet.</p>\n", "signature": "(self, address: str) -> toncenter.client.WalletState", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.get_transactions", "modulename": "toncenter.client", "qualname": "Client.get_transactions", "type": "function", "doc": "<p>Get transaction history of a given address.</p>\n", "signature": "(\n    self,\n    address: str,\n    limit: int = 10,\n    lt: int = None,\n    hash: str = None,\n    to_lt: int = None,\n    archival: bool = False\n) -> List[toncenter.client.Transaction]", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.get_address_balance", "modulename": "toncenter.client", "qualname": "Client.get_address_balance", "type": "function", "doc": "<p>Get balance (in nanotons) of a given address.</p>\n", "signature": "(self, address: str) -> int", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.get_address_state", "modulename": "toncenter.client", "qualname": "Client.get_address_state", "type": "function", "doc": "<p>Get state of a given address. State can be either unitialized, active or frozen.</p>\n", "signature": "(self, address: str) -> str", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.pack_address", "modulename": "toncenter.client", "qualname": "Client.pack_address", "type": "function", "doc": "<p>Convert an address from raw to human-readable format.</p>\n", "signature": "(self, address: str) -> str", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.unpack_address", "modulename": "toncenter.client", "qualname": "Client.unpack_address", "type": "function", "doc": "<p>Convert an address from human-readable to raw format.</p>\n", "signature": "(self, address: str) -> str", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.detect_address", "modulename": "toncenter.client", "qualname": "Client.detect_address", "type": "function", "doc": "<p>Get all possible address forms.</p>\n", "signature": "(self, address: str) -> toncenter.client.AddressMetadata", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.get_masterchain_info", "modulename": "toncenter.client", "qualname": "Client.get_masterchain_info", "type": "function", "doc": "<p>Get up-to-date masterchain state.</p>\n", "signature": "(self) -> toncenter.client.MasterchainState", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.get_consensus_block", "modulename": "toncenter.client", "qualname": "Client.get_consensus_block", "type": "function", "doc": "<p>Get consensus block and its update timestamp.</p>\n", "signature": "(self) -> toncenter.client.ConsensusBlock", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.lookup_block", "modulename": "toncenter.client", "qualname": "Client.lookup_block", "type": "function", "doc": "<p>Look up block by either seqno, lt or unixtime.</p>\n", "signature": "(\n    self,\n    workchain: int,\n    shard: int,\n    seqno: int = None,\n    lt: int = None,\n    unixtime: int = None\n) -> toncenter.client.BlockID", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.get_shards", "modulename": "toncenter.client", "qualname": "Client.get_shards", "type": "function", "doc": "<p>Get shards information.</p>\n", "signature": "(self, seqno: int) -> toncenter.client.Shards", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.get_block_transactions", "modulename": "toncenter.client", "qualname": "Client.get_block_transactions", "type": "function", "doc": "<p>Get transactions of the given block.</p>\n", "signature": "(\n    self,\n    block_id: toncenter.client.BlockID,\n    after_lt: int = None,\n    after_hash: str = None,\n    count: int = 40\n) -> toncenter.client.BlockTransactions", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.get_block_header", "modulename": "toncenter.client", "qualname": "Client.get_block_header", "type": "function", "doc": "<p>Get metadata of a given block.</p>\n", "signature": "(\n    self,\n    block_id: toncenter.client.BlockID\n) -> toncenter.client.BlockHeader", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.get_masterchain_block_header", "modulename": "toncenter.client", "qualname": "Client.get_masterchain_block_header", "type": "function", "doc": "<p>Get metadata of a given seqno, in the master chain.</p>\n", "signature": "(self, seqno: int) -> toncenter.client.BlockHeader", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.try_locate_transaction", "modulename": "toncenter.client", "qualname": "Client.try_locate_transaction", "type": "function", "doc": "<p>Locate outcoming transaction of destination address by incoming message.</p>\n", "signature": "(\n    self,\n    source: str,\n    destination: str,\n    created_lt: int\n) -> toncenter.client.Transaction", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.try_locate_source_transaction", "modulename": "toncenter.client", "qualname": "Client.try_locate_source_transaction", "type": "function", "doc": "<p>Locate incoming transaction of source address by outcoming message.</p>\n", "signature": "(\n    self,\n    source: str,\n    destination: str,\n    created_lt: int\n) -> toncenter.client.Transaction", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.run_get_method", "modulename": "toncenter.client", "qualname": "Client.run_get_method", "type": "function", "doc": "<p>Run get method on smart contract.</p>\n", "signature": "(self, address: str, method: str, stack: List[Any]) -> dict", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.send_boc", "modulename": "toncenter.client", "qualname": "Client.send_boc", "type": "function", "doc": "<p>Send serialized boc file: fully packed and serialized external message to blockchain.</p>\n", "signature": "(self, boc: dict) -> dict", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.send_query", "modulename": "toncenter.client", "qualname": "Client.send_query", "type": "function", "doc": "<p>Send query - unpacked external message. This method takes address, body and init-params (if any), packs it to external message and sends to network. All params should be boc-serialized.</p>\n", "signature": "(\n    self,\n    address: str,\n    body: str,\n    init_code: Any = '',\n    init_data: Any = ''\n) -> dict", "funcdef": "async def"}, {"fullname": "toncenter.client.Client.estimate_fee", "modulename": "toncenter.client", "qualname": "Client.estimate_fee", "type": "function", "doc": "<p>Estimate fees required for query processing. body, init-code and init-data accepted in serialized format (b64-encoded).</p>\n", "signature": "(\n    self,\n    address: str,\n    body: str,\n    init_code: Any = '',\n    init_data: Any = '',\n    ignore_chksig: bool = True\n) -> dict", "funcdef": "async def"}, {"fullname": "toncenter.ticker", "modulename": "toncenter.ticker", "type": "module", "doc": "<p></p>\n"}, {"fullname": "toncenter.ticker.TemporaryMap", "modulename": "toncenter.ticker", "qualname": "TemporaryMap", "type": "class", "doc": "<p>Map with expiration time.</p>\n"}, {"fullname": "toncenter.ticker.TemporaryMap.__init__", "modulename": "toncenter.ticker", "qualname": "TemporaryMap.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "toncenter.ticker.TemporaryMap.set_item", "modulename": "toncenter.ticker", "qualname": "TemporaryMap.set_item", "type": "function", "doc": "<p></p>\n", "signature": "(self, key: Hashable, value: Any, expire_in: int = -1) -> None", "funcdef": "def"}, {"fullname": "toncenter.ticker.TemporaryMap.cleaner", "modulename": "toncenter.ticker", "qualname": "TemporaryMap.cleaner", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> None", "funcdef": "async def"}, {"fullname": "toncenter.ticker.TemporaryMap.start", "modulename": "toncenter.ticker", "qualname": "TemporaryMap.start", "type": "function", "doc": "<p></p>\n", "signature": "(self, delay: int = 10) -> None", "funcdef": "async def"}, {"fullname": "toncenter.ticker.TemporaryMap.stop", "modulename": "toncenter.ticker", "qualname": "TemporaryMap.stop", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> None", "funcdef": "async def"}, {"fullname": "toncenter.ticker.TxStorage", "modulename": "toncenter.ticker", "qualname": "TxStorage", "type": "class", "doc": "<p>Storage for transactions.</p>\n", "bases": "abc.ABC"}, {"fullname": "toncenter.ticker.TxStorage.get_txs", "modulename": "toncenter.ticker", "qualname": "TxStorage.get_txs", "type": "function", "doc": "<p></p>\n", "signature": "(self, address: str) -> List[Tuple[int, str]]", "funcdef": "async def"}, {"fullname": "toncenter.ticker.TxStorage.add_tx", "modulename": "toncenter.ticker", "qualname": "TxStorage.add_tx", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    address: str,\n    amount: int,\n    message: Optional[str] = '',\n    expire_in: Optional[int] = -1\n) -> None", "funcdef": "async def"}, {"fullname": "toncenter.ticker.TxStorage.get_last_seqno", "modulename": "toncenter.ticker", "qualname": "TxStorage.get_last_seqno", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> int", "funcdef": "async def"}, {"fullname": "toncenter.ticker.TxStorage.set_last_seqno", "modulename": "toncenter.ticker", "qualname": "TxStorage.set_last_seqno", "type": "function", "doc": "<p></p>\n", "signature": "(self, seqno: int) -> None", "funcdef": "async def"}, {"fullname": "toncenter.ticker.SqliteStorage", "modulename": "toncenter.ticker", "qualname": "SqliteStorage", "type": "class", "doc": "<p>Storage for transactions.</p>\n", "bases": "TxStorage"}, {"fullname": "toncenter.ticker.SqliteStorage.__init__", "modulename": "toncenter.ticker", "qualname": "SqliteStorage.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, db_file: str = 'ton.db')", "funcdef": "def"}, {"fullname": "toncenter.ticker.SqliteStorage.start", "modulename": "toncenter.ticker", "qualname": "SqliteStorage.start", "type": "function", "doc": "<p></p>\n", "signature": "(self, delay: int = 60) -> None", "funcdef": "async def"}, {"fullname": "toncenter.ticker.SqliteStorage.stop", "modulename": "toncenter.ticker", "qualname": "SqliteStorage.stop", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> None", "funcdef": "async def"}, {"fullname": "toncenter.ticker.SqliteStorage.add_tx", "modulename": "toncenter.ticker", "qualname": "SqliteStorage.add_tx", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    address: str,\n    amount: int,\n    message: Optional[str] = '',\n    expire_in: Optional[int] = -1\n) -> None", "funcdef": "async def"}, {"fullname": "toncenter.ticker.SqliteStorage.get_txs", "modulename": "toncenter.ticker", "qualname": "SqliteStorage.get_txs", "type": "function", "doc": "<p></p>\n", "signature": "(self, address: str) -> List[Tuple[int, str]]", "funcdef": "async def"}, {"fullname": "toncenter.ticker.SqliteStorage.cleanup", "modulename": "toncenter.ticker", "qualname": "SqliteStorage.cleanup", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> None", "funcdef": "async def"}, {"fullname": "toncenter.ticker.SqliteStorage.start_cleanup", "modulename": "toncenter.ticker", "qualname": "SqliteStorage.start_cleanup", "type": "function", "doc": "<p></p>\n", "signature": "(self, delay: int) -> None", "funcdef": "async def"}, {"fullname": "toncenter.ticker.SqliteStorage.set", "modulename": "toncenter.ticker", "qualname": "SqliteStorage.set", "type": "function", "doc": "<p></p>\n", "signature": "(self, key: str, value: str) -> None", "funcdef": "async def"}, {"fullname": "toncenter.ticker.SqliteStorage.get", "modulename": "toncenter.ticker", "qualname": "SqliteStorage.get", "type": "function", "doc": "<p></p>\n", "signature": "(self, key: str) -> str", "funcdef": "async def"}, {"fullname": "toncenter.ticker.SqliteStorage.set_last_seqno", "modulename": "toncenter.ticker", "qualname": "SqliteStorage.set_last_seqno", "type": "function", "doc": "<p></p>\n", "signature": "(self, seqno: int) -> None", "funcdef": "async def"}, {"fullname": "toncenter.ticker.SqliteStorage.get_last_seqno", "modulename": "toncenter.ticker", "qualname": "SqliteStorage.get_last_seqno", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> int", "funcdef": "async def"}, {"fullname": "toncenter.ticker.BlockHandler", "modulename": "toncenter.ticker", "qualname": "BlockHandler", "type": "class", "doc": "<p>Calls any number of used defined handlers for each block.</p>\n"}, {"fullname": "toncenter.ticker.BlockHandler.__init__", "modulename": "toncenter.ticker", "qualname": "BlockHandler.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    client: toncenter.client.Client,\n    last_seqno: int = -1,\n    delay: float = 1,\n    on_checked_seqno: Callable = None\n)", "funcdef": "def"}, {"fullname": "toncenter.ticker.BlockHandler.add_handler", "modulename": "toncenter.ticker", "qualname": "BlockHandler.add_handler", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    handler: Callable[[toncenter.client.BlockID], Coroutine]\n) -> None", "funcdef": "def"}, {"fullname": "toncenter.ticker.BlockHandler.call_handlers", "modulename": "toncenter.ticker", "qualname": "BlockHandler.call_handlers", "type": "function", "doc": "<p></p>\n", "signature": "(self, block_id: toncenter.client.BlockID) -> None", "funcdef": "async def"}, {"fullname": "toncenter.ticker.BlockHandler.block_checker", "modulename": "toncenter.ticker", "qualname": "BlockHandler.block_checker", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> None", "funcdef": "async def"}, {"fullname": "toncenter.ticker.BlockHandler.start", "modulename": "toncenter.ticker", "qualname": "BlockHandler.start", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> None", "funcdef": "async def"}, {"fullname": "toncenter.ticker.BlockHandler.stop", "modulename": "toncenter.ticker", "qualname": "BlockHandler.stop", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> None", "funcdef": "async def"}, {"fullname": "toncenter.ticker.Ticker", "modulename": "toncenter.ticker", "qualname": "Ticker", "type": "class", "doc": "<p>WIP NOT WORKING.</p>\n\n<p>Calls a user defined handler when a registered transaction is found.</p>\n"}, {"fullname": "toncenter.ticker.Ticker.__init__", "modulename": "toncenter.ticker", "qualname": "Ticker.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(\n    self,\n    client: toncenter.client.Client,\n    storage: toncenter.ticker.TxStorage,\n    delay: float = 1\n)", "funcdef": "def"}, {"fullname": "toncenter.ticker.Ticker.start", "modulename": "toncenter.ticker", "qualname": "Ticker.start", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> None", "funcdef": "async def"}, {"fullname": "toncenter.ticker.Ticker.stop", "modulename": "toncenter.ticker", "qualname": "Ticker.stop", "type": "function", "doc": "<p></p>\n", "signature": "(self) -> None", "funcdef": "async def"}, {"fullname": "toncenter.ticker.Ticker.block_receiver", "modulename": "toncenter.ticker", "qualname": "Ticker.block_receiver", "type": "function", "doc": "<p></p>\n", "signature": "(self, block_id: toncenter.client.BlockID) -> None", "funcdef": "async def"}, {"fullname": "toncenter.ticker.Ticker.set_handler", "modulename": "toncenter.ticker", "qualname": "Ticker.set_handler", "type": "function", "doc": "<p></p>\n", "signature": "(self, handler: Callable[[str, int, str], Coroutine]) -> None", "funcdef": "async def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();